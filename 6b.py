# -*- coding: utf-8 -*-
"""Program 6b.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C5-LR8irS3yyVSHdk6OCO4Y0SutGISZn
"""

# Install PyCryptodome if not already installed
!pip install pycryptodome

from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import base64

# --- Helper functions for AES encryption/decryption ---
def pad(s):
    return s + (16 - len(s) % 16) * chr(16 - len(s) % 16)

def unpad(s):
    return s[:-ord(s[len(s)-1:])]

def encrypt_message(key, message):
    cipher = AES.new(key, AES.MODE_CBC)
    ct_bytes = cipher.encrypt(pad(message).encode())
    iv = base64.b64encode(cipher.iv).decode('utf-8')
    ct = base64.b64encode(ct_bytes).decode('utf-8')
    return iv + "|" + ct   # <-- changed separator

def decrypt_message(key, encrypted_message):
    iv, ct = encrypted_message.split("|")
    iv = base64.b64decode(iv)
    ct = base64.b64decode(ct)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    pt = unpad(cipher.decrypt(ct).decode())
    return pt

# Shared secret key
key = get_random_bytes(16)

# Simulated server (just forwards encrypted messages)
def server_forward(encrypted_msg):
    print("[Server] --> Message relayed.\n")
    return encrypted_msg

# Simple chat loop
print("==== Encrypted Messaging Demo ====")
print("Type 'exit' anytime to close chat.\n")

sender = "Virat"
receiver = "Prateek"

while True:
    msg = input(f"{sender} says: ")
    if msg.lower() == "exit":
        print("\n[System] Chat session terminated.")
        break

    # Encrypt before sending
    encrypted_msg = encrypt_message(key, msg)
    print(f"[{sender}] (ciphertext): {encrypted_msg}")

    # Server forwards
    forwarded_msg = server_forward(encrypted_msg)

    # Receiver decrypts
    decrypted_msg = decrypt_message(key, forwarded_msg)
    print(f"[{receiver}] (plaintext): {decrypted_msg}\n")

    # Swap sender and receiver for next round
    sender, receiver = receiver, sender